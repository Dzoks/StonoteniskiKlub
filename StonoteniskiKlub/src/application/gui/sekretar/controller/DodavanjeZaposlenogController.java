package application.gui.sekretar.controller;

import javafx.fxml.FXML;

import javafx.scene.control.Button;

import javafx.scene.control.TextField;

import javafx.scene.control.ToggleGroup;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ResourceBundle;

import org.bouncycastle.jcajce.provider.keystore.BC;

import application.gui.controller.BaseController;
import application.model.dao.DAOFactory;
import application.model.dto.ZaposleniDTO;
import application.model.dto.ZaposleniTipDTO;
import application.model.dto.ZaposlenjeDTO;
import application.util.AlertDisplay;
import application.util.ConnectionPool;
import application.util.InputValidator;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;

import javafx.scene.control.ComboBox;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.scene.control.RadioButton;

import javafx.scene.control.DatePicker;

public class DodavanjeZaposlenogController extends BaseController {
	@FXML
	private ImageView imgFotografija;
	@FXML
	private TextField txtIme;
	@FXML
	private TextField txtPrezime;
	@FXML
	private TextField txtImeRoditelja;
	@FXML
	private TextField txtJMB;
	@FXML
	private TextField tfBrojTelefona;
	@FXML
	private Button btnDodajBrojTelefona;
	@FXML
	private DatePicker dpDatumRodjenja;
	@FXML
	private RadioButton rbMuskiPol;
	@FXML
	private ToggleGroup groupPol;
	@FXML
	private RadioButton rbZenskiPol;
	@FXML
	private Button btnDodajFotografiju;
	@FXML
	private DatePicker dpZaposlenOd;
	@FXML
	private DatePicker dpZaposlenDo;
	@FXML
	private ComboBox<ZaposleniTipDTO> cmbRadnoMjesto;
	@FXML
	private TextField txtPlata;
	@FXML
	private Button btnSacuvajPodatke;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		cmbRadnoMjesto.setItems(DAOFactory.getDAOFactory().getZaposleniTipDAO().selectAll());
		cmbRadnoMjesto.getSelectionModel().select(0);
	}

	// Event Listener on Button[#btnDodajBrojTelefona].onAction
	@FXML
	public void dodajBrojTelefona(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#btnDodajFotografiju].onAction
	@FXML
	public void dodajFotografiju(ActionEvent event) {
		imgChooser.setTitle("Izaberite fotografiju");
		imgChooser.setSelectedExtensionFilter(new ExtensionFilter("slike", ".jpg", ".jpeg", ".bmp", ".gif"));
		File file = imgChooser.showOpenDialog(this.primaryStage);
		if(file != null){
			System.out.println(file.getAbsolutePath());
			fotografijaLik = file;
			try {
				imgFotografija.setImage(new Image(new FileInputStream(file)));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}
	}

	// Event Listener on Button[#btnSacuvajPodatke].onAction
	@FXML
	public void sacuvaj(ActionEvent event) {
		if (InputValidator.allEntered(txtIme.getText(), txtPrezime.getText(), txtImeRoditelja.getText(),
				txtJMB.getText(), dpDatumRodjenja.getValue(), dpZaposlenOd.getValue(), txtPlata.getText())) {
			if (InputValidator.validateJMB(txtJMB.getText())) {
				if (InputValidator.validateDouble(txtPlata.getText())) {
					try {
						ZaposleniTipDTO tip = cmbRadnoMjesto.getValue();
						SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
						Date datumOd = formatter.parse(dpZaposlenOd.getValue().toString());
						Date datumDo = null;
						if (dpZaposlenDo.getValue() != null) {
							datumDo = formatter.parse(dpZaposlenDo.getValue().toString());
						}
						ZaposlenjeDTO zaposlenje = new ZaposlenjeDTO(tip.getId(), tip.getTip(), datumOd, datumDo,
								Double.parseDouble(txtPlata.getText()));
						char pol = rbMuskiPol.isSelected() ? 'M' : 'Z';
						Date datumRodjenja = formatter.parse(dpDatumRodjenja.getValue().toString());
						Blob slika = null;
						if(fotografijaLik != null){
							try {
								slika = convertImageToBlob(fotografijaLik);
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						ZaposleniDTO zaposleni = new ZaposleniDTO(null, txtIme.getText(), txtPrezime.getText(), txtImeRoditelja.getText(), txtJMB.getText(), pol, datumRodjenja, slika, null, true, null);
						if(DAOFactory.getDAOFactory().getZaposleniDAO().insert(zaposleni, zaposlenje, tip)){
							zaposleni.setZaposljenja(FXCollections.observableArrayList());
							zaposleni.getZaposljenja().add(zaposlenje);
							AlertDisplay.showInformation("Uspjesno", "", "Zaposleni uspjesno dodan!");
							parent.dodajZaposlenog(zaposleni);
						} else{
							AlertDisplay.showInformation("Greska", "", "Greska pri dodavanju");
						}
					} catch (ParseException e) {
						e.printStackTrace();
					}
				} else {
					AlertDisplay.showInformation("Greska", "", "Pogresan format podatka za platu.");
				}
			} else {
				AlertDisplay.showInformation("Greska", "", "Pogresan format JMB-a.");
			}
		} else {
			AlertDisplay.showInformation("Greska", "", "Niste unijeli sve podatke");
		}
	}
	private FileChooser imgChooser = new FileChooser();
	
	public void setParent(RadSaZaposlenimaController parent){
		this.parent = parent;
	}
	private Blob convertImageToBlob(File fotografija) throws IOException {
		if(fotografija == null)
			return null;
		Connection conn;
		try {
			conn = ConnectionPool.getInstance().checkOut();
			Blob blob = conn.createBlob();
			
			blob.setBytes(1, Files.readAllBytes(fotografija.toPath()));
			return blob;
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}
	private RadSaZaposlenimaController parent;
	private File fotografijaLik = null;
}
